=title Transform arrays and lists using map
=timestamp 2014-12-31T14:02:05
=author szabgab
=keywords map, $_, $^number
=archive 1
=status show
=perl5url http://perlmaven.com/transforming-a-perl-array-using-map
=perl5title Transforming a Perl array using map

=abstract start

The <b>map</b> function allows us to create a compact expression transforming each element of an array or that of a list
to some other kind of value. Perl 5 used the same <b>map</b> keyword. In Python this is usually accomplished with
<b>list comprehension</b>.

=abstract end

<h2>map as a function</h2>

In the first example we created an array of 3 numbers and then used the <b>map</b> function to create a new array that will contain the duplicate
of each original value. The variable <b>$_</b> contains the current element of the array. Effectively, <b>map</b> is a loop that iterates
over the array on the right hand side, assigns each element to <b>$_</b> variable, executes the code in the block, and collects the results.
The collected list is assigned to the array on the left hand side of the <b>=</b> assignment.

In the second example, instead of using <b>$_</b>, the default variable name, we used another variable type that is auto-generated.
We could have used any variable name there. The caret <b>^</b> after the <b>$</b>-sign told perl that this is an auto-generated variable.
This has exactly the same job as <b>$_</b> but if you select a good name will make your code much more readable.

The <b>perl</b> method helps us to dump the content of the array.

Finally we printed the original array showing that it has not changed.

<include file="tutorial/arrays/map_double_function.p6" />

<h2>map as a method</h2>

The same functionality is available as a method as well.

In this example we created the same array and then called the <b>map</b> method on it.
In the first call we used the arrow operator to create an internal variable. Much like
it is done in regular <b>for</b>-loops. Then, just as in a <b>for</b>-loop a block follows
with the actual expression.

In the second expression the first <b>*</b> is the <b>Whatever</b> operator, which is anothe
placeholder of the "current value". I think this version is not very readable so I'd not
recommend it.

<include file="tutorial/arrays/map_double_method.p6" />


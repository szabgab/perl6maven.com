=title Parsing command line arguments in Perl 6 - ARGS - ARGV - MAIN
=timestamp 2017-07-04T10:52:03
=author szabgab
=keywords @*ARGS, @ARGV, MAIN, :, !
=status show
=archive 1
=comments 1

=abstract start

When writing a program, one of the best ways to make it reusable
is by accepting parameters on the command line.

For example if you are writing a program that needs to parse a log file,
you might want to supply the name of the logfile on the command line.

If the application needs to send an e-mail report, it is more generic if
the user can supply the address as a command line parameter: --to boss@company

How can you let your Perl 6 application accept command line arguments?

=abstract end

When Perl 6 is launched, it fills the system variable <hl>@*ARGS</hl>
with all the values from the command line. A simple script like the
following can demonstrate what we get:

<include file="examples/cli/args.pl6" />

Save as args.pl6 and run

<hl>perl6 args.pl6 first --second "third and fourth"</hl>

The output will be

<code>
["first", "--second", "third and fourth"]
</code>

The <hl>@*ARGS</hl> in Perl 6 is the same as <hl>@ARGV</hl> in Perl 5 and similar to <hl>sys.argv</hl> in Python.
It does NOT contain the name of the executable itself as it is done in C and Python for example.

We could now write some code that goes over the values in <hl>@*ARGS</hl>, but luckily Perl 6 provides
a built-in mechanism for that. It is the same mechanism that works for <a href="/perl6-subroutines">Perl 6
subroutines</a>.
After all the command line parameters of a program are very similar to the arguments of a function.

<h2>MAIN - positional parameters</h2>

There is a special name in Perl 6 called <hl>MAIN</hl>. If your main program file
contains a subroutine called MAIN, that subroutine will be executed when the program is
launched.

Furthermore, the signature of that subroutine is the expected list of arguments of the whole program.

Let's see a simple example:

<include file="examples/cli/source.pl6" />

Save it as source.pl6 and run it as <b>perl6 source.pl6</b>.

You will get:

<code>
Usage:
  source.pl6 <source>
</code>

That's because the <hl>MAIN</hl> subroutine expects a single positional argument
that will be assigned to the <hl>$source</hl> variable.

Now run <b>perl6 source.pl6 input.txt</b>.

The output will be:

<code>
source: input.txt
</code>

That means, the command line parameter was accepted and the MAIN sub was called with <hl>$source</hl> having the value
"input.txt".

However if you run <b>perl6 source.pl6 --name</b> or <b>perl6 source.pl6 -n</b>, or <hl>perl6 source.pl6 one two</hl>  you'll get the usage report:

<code>
Usage:
  source.pl6 <source>
</code>

<h2>More than one positional</h2>

We can, of course, expect more than one positional values:

<include file="examples/cli/positionals.pl6" />

If we run it without any parameter <hl>perl6 positionals.pl6</hl>
or without the expected number of (4) parameters: <hl>perl6 positionals.pl6 one two</hl>
or with too many parameters: <hl>perl6 positionals.pl6 one two three 4 5</hl>
we will see the usage message:

<code>
Usage:
  positionals.pl6 <source> <target> <count> <debug>
</code>

We must use the correct number of parameters:

<code>
$ perl6 positionals.pl6 egy ketto 3 yes
source: egy
target: ketto
count:  3
debug:  yes
</code>

<h2>Named parameters</h2>

Positional parameters are usually not very useful as the user must supply them in the expected order
and even if some of them are marked optional by the developer, the user cannot leave out the 2nd parameter
if you'd like to supply the 3rd. A much better approach is to expect and supply named parameters.

Just as in regular subroutines, Perl 6 allows us to turn arguments into named parameter in the MAIN sub as well.

We just need to put a colon <hl>:</hl> in front of the variable name to turn it into a named variable:

<include file="examples/cli/named.pl6" />

If we run <hl>perl6 named.pl6</hl> We get lots of warnings:

<code>
Use of uninitialized value $source of type Any in string context.
Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.
  in sub MAIN at files/examples/cli/named.pl6 line 4
source:
Use of uninitialized value $target of type Any in string context.
Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.
  in sub MAIN at files/examples/cli/named.pl6 line 5
target:
Use of uninitialized value $count of type Any in string context.
Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.
  in sub MAIN at files/examples/cli/named.pl6 line 6
count:
Use of uninitialized value $debug of type Any in string context.
Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.
  in sub MAIN at files/examples/cli/named.pl6 line 7
debug:
</code>

That happens because the named parameters are, by default, optional but their value is not initialized.
So if we blindly print them out we will get these warnings.

There are several ways to fix this.

<h3>Check if arguments are defined?</h3>

One would be to check if the values are defined before printing them:

<include file="examples/cli/named_defined.pl6" />

This allows us to run: <hl>perl6 named_defined.pl6</hl> that would print nothing,
We could run <hl>perl6 named_defined.pl6 --source=hello --debug=yes</hl> that would print

<code>
source: hello
debug:  yes
</code>

And <hl>perl6 named_defined.pl6 --help</hl> or <hl>perl6 named_defined.pl6 --qqrq</hl>
or any other incorrect name that would print the usage string:

<code>
Usage:
  named_defined.pl6 [--source=<Any>] [--target=<Any>] [--count=<Any>] [--debug=<Any>]
</code>

<h3>Set default values</h3>

The other, probably much better way, is to set default values to the attributes:

<include file="examples/cli/named_defaults.pl6" />

In this case we set default values to the <hl>debug</hl> and <hl>count</hl> parameters
and hope that the user will always supply the <hl>source</hl> and <hl>target</hl>.

The normal operation would look like this:

<hl>perl6 named_defaults.pl6 --source=here --target=there</hl>

<code>
source: here
target: there
count:  3
debug:  False
</code>

but one could override both the debug and the count parameters: 
<hl>perl6 named_defaults.pl6 --source=here --target=there --debug=no --count=17</hl>:

<code>
source: here
target: there
count:  17
debug:  no
</code>

<h3>Empty defaults</h3>

In rare cases you might want to set the default values to the empty string or the number zero:

<code lang="perl6">
sub MAIN(:$source = '', :$count = 0) { } 
</code>


<h2>Required parameters</h2>
<img src="/img/exclamation_point.png" alt="Exclamation point" style="float:right" />

By default each named parameter is optional, but we could also tell Perl 6, that some of the parameters are required
by adding a trailing exclamation point <hl>!</hl>. For example here we required that both <hl>$source</hl>
and <hl>$target</hl> will be supplied by the user.


<hl>perl6 named_required.pl6 --source=here --target=there --debug=no --count=1</hl>

<code>
source: here
target: there
count:  1
debug:  no
</code>

If one or more of the required parameters are missing like <hl>$target</hl> in this example:
<hl>perl6 named_required.pl6 --source=here --debug=no --count=1</hl>

Then we get the usage string:

<code>
Usage:
  files/examples/cli/named_required.pl6 --source=<Any> --target=<Any> [--count=<Any>] [--debug=<Any>]
</code>

<h2>Type restrictions</h2>

Perl 6 supports what is called <b>gradual typing</b> which means that while we can declare variables
without any type restrictions, we can, as we understand more about our application, add type declarations
to variables and let Perl 6 enforce the type checking. This can be also used to enhance the command line parameter processing.

You could declare that the <hl>$count</hl> variable should be an integer <hl>Int</hl> or that the <hl>$debug</hl> variable
must be a boolean <hl>Bool</hl>.

<include file="examples/cli/typed.pl6" />

In this case the usage message will indicate the required data type: <hl>perl6 typed.pl6</hl>

<code>
Usage:
  typed.pl6 --source=<Str> --target=<Str> [--count=<Int>] [--debug]
</code>

If we supply an invalid value, for examples a string to the <hl>$count</hl> parameter
we get the usage string: <hl>perl6 typed.pl6 --source=here --target=there --count=abc</hl>
So by declaring that a parameter is of type <hl>Int</hl> we added parameter checking as well.

An even more interesting aspect is when we set a parameter to be <hl>Bool</hl>. Then suddenly
we are not expected to supply a value to the name. The mere presence of the flag will flip the
default <hl>False</hl> to <hl>True</hl>:

<hl>perl6 typed.pl6 --source=here --target=there --count=7 --debug</hl>

<code>
source: here
target: there
count:  7
debug:  True
</code>

Though if we really wanted to, we could still supply the value of the <hl>$debug</hl> flag:

<hl>perl6 typed.pl6 --source=here --target=there --count=7 --debug=False</hl>

<code>
source: here
target: there
count:  7
debug:  False
</code>

<h2>Any number of parameters</h2>

Finally, there are many cases when after a number of named parameters we would like to accept an arbitrary number of extra values.
These are usually filenames we want to act upon, but not necessarily. In order to accept arbitrary number of values, we can declare
a slurpy array as one of the parameters:

<include file="examples/cli/slurp.pl6" />

All the values from the command line will be slurped in to that array.

<hl>perl6 slurp.pl6 one two.txt "name with space.doc"</hl>

<code>
files: ["one", "two.txt", "name with space.doc"]
</code>

If no parameter is supplied it is still ok. We get back an empty array:

<hl>perl6 slurp.pl6</hl>

<code>
files: []
</code>

<h2>Named params and slurpy param</h2>

In many cases we will need to accept a few named parameters and then an arbitrary number of extra values.
We can do that by mixing named parameters and a slurpy array:

<include file="examples/cli/named_and_slurpy.pl6" />

<hl>$ perl6 named_and_slurpy.pl6</hl>

<code>
Usage:
  named_and_slurpy.pl6 --source=<Str> --target=<Str> [--count=<Int>] [--debug] [<files> ...]
</code>

<hl>perl6 named_and_slurpy.pl6 --source=from --target=to one two.txt "3 4 5"</hl>

<code>
source: from
target: to
count:  3
debug:  False
files: ["one", "two.txt", "3 4 5"]
</code>

<h2>Conclusion</h2>

There is more of course, for example we could defined the <hl>MAIN</hl> sub as a <hl>multi</hl> and then we
can have multiple definitions, but this is enough for now.
This can already get you started writing Perl 6 applications that accept parameters on the command line.

